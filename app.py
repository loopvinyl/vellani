import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Financeira 2024 - CVM",
    page_icon="üìä",
    layout="wide"
)

# T√≠tulo principal
st.title("üè¢ Dashboard de An√°lise Financeira - CVM 2024")
st.markdown("Indicadores financeiros das empresas brasileiras - Ano base 2024")

@st.cache_data
def load_data():
    """Carrega e processa os dados para 2024"""
    df = pd.read_excel('data_frame.xlsx')
    
    # Filtrar apenas 2024
    df_2024 = df[df['Ano'] == 2024].copy()
    
    return df_2024

def calcular_indicadores_2024(df):
    """Calcula indicadores para 2024 (sem saldos m√©dios)"""
    
    # 1. INDICADORES DE RENTABILIDADE
    df['MARGEM_BRUTA'] = df['Resultado Bruto'] / df['Receita de Venda de Bens e/ou Servi√ßos']
    df['MARGEM_EBIT'] = df['Resultado Antes do Resultado Financeiro e dos Tributos'] / df['Receita de Venda de Bens e/ou Servi√ßos']
    df['MARGEM_LIQUIDA'] = df['Lucro/Preju√≠zo Consolidado do Per√≠odo'] / df['Receita de Venda de Bens e/ou Servi√ßos']
    
    # 2. INDICADORES DE LIQUIDEZ
    df['LIQUIDEZ_CORRENTE'] = df['Ativo Circulante'] / df['Passivo Circulante']
    df['LIQUIDEZ_SECA'] = (df['Ativo Circulante'] - df['Custo dos Bens e/ou Servi√ßos Vendidos']) / df['Passivo Circulante']
    df['LIQUIDEZ_GERAL'] = df['Ativo Total'] / df['Passivo Total']
    
    # 3. INDICADORES DE ENDIVIDAMENTO
    df['ENDIVIDAMENTO_TOTAL'] = df['Passivo Total'] / df['Ativo Total']
    df['COMPOSICAO_ENDIVIDAMENTO'] = df['Passivo Circulante'] / df['Passivo Total']
    df['GARANTIA_CAPITAL_PROPRIO'] = df['Patrim√¥nio L√≠quido Consolidado'] / df['Passivo Total']
    df['ALAVANCAGEM_FINANCEIRA'] = df['Passivo Total'] / df['Patrim√¥nio L√≠quido Consolidado']
    
    # 4. INDICADORES DE EFICI√äNCIA
    df['GIRO_ATIVO'] = df['Receita de Venda de Bens e/ou Servi√ßos'] / df['Ativo Total']
    
    # 5. INDICADORES DE FLUXO DE CAIXA
    df['FCO_RECEITA'] = df['Caixa L√≠quido Atividades Operacionais'] / df['Receita de Venda de Bens e/ou Servi√ßos']
    df['FCO_LL'] = df['Caixa L√≠quido Atividades Operacionais'] / df['Lucro/Preju√≠zo Consolidado do Per√≠odo']
    
    # 6. INDICADORES DE CUSTO
    df['CUSTO_DIVIDA'] = df['Despesas Financeiras'] / (df['Empr√©stimos e Financiamentos - Circulante'] + 
                                                     df['Empr√©stimos e Financiamentos - N√£o Circulante'])
    
    return df

# Carregar dados
df_2024 = load_data()
df_2024 = calcular_indicadores_2024(df_2024)

# Sidebar
st.sidebar.header("üîç Filtros")
setores = st.sidebar.multiselect(
    "Setores Econ√¥micos",
    options=df_2024['Setor Econ√¥mico'].unique(),
    default=df_2024['Setor Econ√¥mico'].unique()[:3]
)

empresas = st.sidebar.multiselect(
    "Empresas",
    options=df_2024['Nome Empresa'].unique()
)

# Aplicar filtros
if setores:
    df_2024 = df_2024[df_2024['Setor Econ√¥mico'].isin(setores)]
if empresas:
    df_2024 = df_2024[df_2024['Nome Empresa'].isin(empresas)]

# Layout principal
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìà Vis√£o Geral", 
    "üí∞ Rentabilidade", 
    "üè¶ Liquidez & Endividamento", 
    "üìä Setores",
    "üîç Detalhes"
])

with tab1:
    st.header("Indicadores Principais - 2024")
    
    # M√©tricas r√°pidas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Empresas Analisadas", len(df_2024))
    with col2:
        st.metric("Setores", df_2024['Setor Econ√¥mico'].nunique())
    with col3:
        margem_media = df_2024['MARGEM_LIQUIDA'].mean()
        st.metric("Margem L√≠quida M√©dia", f"{margem_media:.1%}")
    with col4:
        roe_medio = (df_2024['Lucro/Preju√≠zo Consolidado do Per√≠odo'] / df_2024['Patrim√¥nio L√≠quido Consolidado']).mean()
        st.metric("ROE M√©dio", f"{roe_medio:.1%}")

    # Top empresas por lucro
    st.subheader("üèÜ Top 10 Empresas - Maior Lucro L√≠quido")
    top_lucro = df_2024.nlargest(10, 'Lucro/Preju√≠zo Consolidado do Per√≠odo')[['Nome Empresa', 'Lucro/Preju√≠zo Consolidado do Per√≠odo', 'MARGEM_LIQUIDA']]
    st.dataframe(top_lucro.style.format({
        'Lucro/Preju√≠zo Consolidado do Per√≠odo': 'R$ {:,.0f}',
        'MARGEM_LIQUIDA': '{:.1%}'
    }))

with tab2:
    st.header("üìä An√°lise de Rentabilidade")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribui√ß√£o de Margem L√≠quida
        fig = px.histogram(df_2024, x='MARGEM_LIQUIDA', 
                          title='Distribui√ß√£o da Margem L√≠quida',
                          labels={'MARGEM_LIQUIDA': 'Margem L√≠quida'})
        st.plotly_chart(fig)
    
    with col2:
        # Margem Bruta vs Margem L√≠quida
        fig = px.scatter(df_2024, x='MARGEM_BRUTA', y='MARGEM_LIQUIDA',
                        hover_data=['Nome Empresa'],
                        title='Margem Bruta vs Margem L√≠quida')
        st.plotly_chart(fig)

with tab3:
    st.header("üè¶ Liquidez e Endividamento")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Liquidez Corrente
        fig = px.box(df_2024, y='LIQUIDEZ_CORRENTE', 
                    title='Distribui√ß√£o da Liquidez Corrente')
        st.plotly_chart(fig)
    
    with col2:
        # Endividamento
        fig = px.histogram(df_2024, x='ENDIVIDAMENTO_TOTAL',
                          title='Distribui√ß√£o do Endividamento Total')
        st.plotly_chart(fig)

with tab4:
    st.header("üìà An√°lise Setorial")
    
    # M√©tricas por setor
    setor_analysis = df_2024.groupby('Setor Econ√¥mico').agg({
        'MARGEM_LIQUIDA': 'mean',
        'LIQUIDEZ_CORRENTE': 'mean',
        'ENDIVIDAMENTO_TOTAL': 'mean',
        'Nome Empresa': 'count'
    }).round(4)
    
    setor_analysis = setor_analysis.rename(columns={'Nome Empresa': 'N¬∫ Empresas'})
    st.dataframe(setor_analysis.style.format({
        'MARGEM_LIQUIDA': '{:.1%}',
        'LIQUIDEZ_CORRENTE': '{:.2f}',
        'ENDIVIDAMENTO_TOTAL': '{:.1%}'
    }))

with tab5:
    st.header("üîç Dados Detalhados por Empresa")
    
    # Seletor de empresa para detalhes
    empresa_selecionada = st.selectbox(
        "Selecione uma empresa para detalhes:",
        options=df_2024['Nome Empresa'].unique()
    )
    
    if empresa_selecionada:
        empresa_data = df_2024[df_2024['Nome Empresa'] == empresa_selecionada].iloc[0]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üí∞ Dados Financeiros")
            st.metric("Receita", f"R$ {empresa_data['Receita de Venda de Bens e/ou Servi√ßos']:,.0f}")
            st.metric("Lucro L√≠quido", f"R$ {empresa_data['Lucro/Preju√≠zo Consolidado do Per√≠odo']:,.0f}")
            st.metric("Ativo Total", f"R$ {empresa_data['Ativo Total']:,.0f}")
            st.metric("Patrim√¥nio L√≠quido", f"R$ {empresa_data['Patrim√¥nio L√≠quido Consolidado']:,.0f}")
        
        with col2:
            st.subheader("üìä Indicadores")
            st.metric("Margem L√≠quida", f"{empresa_data['MARGEM_LIQUIDA']:.1%}")
            st.metric("Liquidez Corrente", f"{empresa_data['LIQUIDEZ_CORRENTE']:.2f}")
            st.metric("Endividamento", f"{empresa_data['ENDIVIDAMENTO_TOTAL']:.1%}")
            st.metric("Giro do Ativo", f"{empresa_data['GIRO_ATIVO']:.2f}")

# Rodap√©
st.sidebar.markdown("---")
st.sidebar.markdown("**Fonte:** Dados CVM - 2024")
st.sidebar.markdown("**√öltima atualiza√ß√£o:** " + datetime.now().strftime("%d/%m/%Y"))
